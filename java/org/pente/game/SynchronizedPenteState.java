package org.pente.game;

/**
 * @author dweebo
 */
public class SynchronizedPenteState extends SynchronizedGridState implements PenteState {

    PenteState penteState;

    public SynchronizedPenteState(PenteState penteState) {
        super(penteState);

        this.penteState = penteState;
    }

    public synchronized int getNumCaptures(int player) {
        return penteState.getNumCaptures(player);
    }

    public synchronized void setInitCaptures(int player, int caps) {
    	penteState.setInitCaptures(player, caps);
    }
    public synchronized int[] getCaptures(int atMove) {
        return penteState.getCaptures(atMove);
    }
    public boolean isValidPosition(int newPosition, int oldPosition) {
        return penteState.isValidPosition(newPosition, oldPosition);
    }
    public synchronized void setTournamentRule(boolean rule) {
        penteState.setTournamentRule(rule);
    }

    public synchronized void setCaptureLengths(int lengths[]) {
        penteState.setCaptureLengths(lengths);
    }

    public synchronized void setCapturesToWin(int num) {
        penteState.setCapturesToWin(num);
    }
    public synchronized void setGPenteRules(boolean gpente) {
        penteState.setGPenteRules(gpente);
    }
    public synchronized void setDPenteRules(boolean dpente) {
        penteState.setDPenteRules(dpente);
    }
    public synchronized void dPenteSwapDecisionMade(boolean swap) {
        penteState.dPenteSwapDecisionMade(swap);
    }
    public boolean wasDPenteSwapDecisionMade() {
        return penteState.wasDPenteSwapDecisionMade();
    }
    public synchronized boolean didDPenteSwap() {
        return penteState.didDPenteSwap();
    }
}