package org.pente.gameServer.core;

import java.util.Vector;

import org.pente.game.Coord;
import org.pente.game.GridState;
import org.pente.game.MoveData;
import org.pente.game.SimplePoofPenteState;

/**
 * @author dweebo
 */
public class PoofPenteStatePieceCollectionAdapter
    extends SimplePoofPenteState {

    protected Vector  listeners;
    protected Vector  gridPieces;

    boolean poofed;
    GridPiece gridPiece;
    GridPieceAction gridPieceAction;

    public PoofPenteStatePieceCollectionAdapter(GridState gridState) {
        super(gridState);

        listeners = new Vector();
        gridPieces = new Vector();
    }

    public PoofPenteStatePieceCollectionAdapter() {
        super();

        listeners = new Vector();
        gridPieces = new Vector();
    }

    public PoofPenteStatePieceCollectionAdapter(
        MoveData data,
        int boardSizeX,
        int boardSizeY) {
        super(data, boardSizeX, boardSizeY);

        listeners = new Vector();
        gridPieces = new Vector();
    }

    public PoofPenteStatePieceCollectionAdapter(
        int boardSizeX,
        int boardSizeY) {
        super(boardSizeX, boardSizeY);

        listeners = new Vector();
        gridPieces = new Vector();
    }

    public void addOrderedPieceCollectionListener(OrderedPieceCollection pieceCollection) {
        listeners.addElement(pieceCollection);
    }
    public void removePieceCollectionListener(OrderedPieceCollection pieceCollection) {
        listeners.removeElement(pieceCollection);
    }

    /** Clears the grid state */
    public void clear() {
        super.clear();
        gridPieces.removeAllElements();
        for (int i = 0; i < listeners.size(); i++) {
            OrderedPieceCollection o = (OrderedPieceCollection) listeners.elementAt(i);
            o.clearPieces();
        }
    }

    /** Add a move for this board
     *  @param move An integer representation of a move
     */
    public void addMove(int move) {

        poofed = false;

        // add grid piece
        gridPiece = new SimpleGridPiece();
        gridPiece.setPlayer(super.getCurrentPlayer());
        int x = move % super.getGridSizeX();
        int y = super.getGridSizeY() - move / super.getGridSizeX() - 1;
        gridPiece.setX(x);
        gridPiece.setY(y);

        gridPieceAction = new GridPieceAction(gridPiece, super.getNumMoves() + 1, GridPieceAction.ADD);
        gridPieces.addElement(gridPieceAction);

        super.addMove(move);

        notifyListenersAdd(gridPiece);

        for (int i = 0; i < poofedAt[getCurrentPlayer()].length; i++) {
            if (poofedAt[getCurrentPlayer()][i] != 0 &&
                poofedAt[getCurrentPlayer()][i] == getNumMoves() - 1) {
                removeCaptures(poofedMoves[getCurrentPlayer()][i]);
            }
        }
    }

    /** Undo the last move */
    public void undoMove() {

        for (int i = 0; i < gridPieces.size(); i++) {
            GridPieceAction a = (GridPieceAction) gridPieces.elementAt(i);
            if (a.getTurn() == super.getNumMoves()) {
                gridPieces.removeElementAt(i);
            }
        }

        super.undoMove();

        for (int i = 0; i < listeners.size(); i++) {
            OrderedPieceCollection o = (OrderedPieceCollection) listeners.elementAt(i);
            o.undoLastTurn();
        }
    }

    private void notifyListenersAdd(GridPiece p) {
        for (int i = 0; i < listeners.size(); i++) {
            OrderedPieceCollection o = (OrderedPieceCollection) listeners.elementAt(i);
            o.addPiece(p, super.getNumMoves());
        }
    }

    // overridden
    protected void captureMove(int move, int capturePlayer) {
        super.captureMove(move, capturePlayer);

        removeCaptures(move);
    }

    void removeCaptures(int move) {
    	Coord p = convertMove(move);
        int x  = p.x;
        int y = p.y;
        y = super.getGridSizeY() - y - 1;

        for (int i = gridPieces.size() - 1; i >= 0; i--) {
            GridPieceAction a = (GridPieceAction) gridPieces.elementAt(i);
            if (a.getGridPiece().getX() == x &&
                a.getGridPiece().getY() == y) {

                for (int j = 0; j < listeners.size(); j++) {
                    OrderedPieceCollection o = (OrderedPieceCollection) listeners.elementAt(j);
                    o.removePiece(a.getGridPiece(), super.getNumMoves());
                }

                break;
            }
        }
    }
}
